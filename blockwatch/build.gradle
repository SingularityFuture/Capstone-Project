apply plugin: 'com.android.application'


buildscript {
    repositories {
        maven { url 'http://repo1.maven.org/maven2' }
        jcenter { url "http://jcenter.bintray.com/" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
    }
}

repositories {
    maven { url 'http://repo1.maven.org/maven2' }
    maven { url = 'https://raw.githubusercontent.com/blockchain/api-v1-client-java/mvn-repo' }
    jcenter { url "http://jcenter.bintray.com/" }
    maven { url "https://jitpack.io" }
    jcenter()
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    signingConfigs {
        myconfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId "com.singularityfuture.blockwatch"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.myconfig
        }
    }

    productFlavors {
        free {
            applicationIdSuffix ".free"
            versionNameSuffix "-free"
        }
        paid {
            applicationIdSuffix ".paid"
            versionNameSuffix "-paid"
        }
    }

    // `return void` removes the lint error: `Not all execution paths return a value`.
    return void
    sourceSets { free { java.srcDirs = ['src/free/java', 'src/free/java/'] } }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    wearApp project(':blockwatchface')
    compile 'com.android.support:appcompat-v7:25.3.0'
    compile 'com.android.support:design:25.3.0'
    compile 'com.android.support:preference-v7:25.3.0'
    compile 'com.android.support:preference-v14:25.3.0'
    compile 'com.android.support:support-v4:25.3.0'
    compile 'info.blockchain:api:1.1.4'
    compile 'com.thebluealliance:spectrum:0.7.1'
    compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'

    testCompile 'junit:junit:4.12'

    compile 'com.google.android.gms:play-services-ads:10.2.0'
    compile 'com.google.android.gms:play-services-maps:10.2.0'

    compile 'com.firebase:firebase-jobdispatcher:0.6.0'

    compile 'com.github.paolorotolo:appintro:4.1.0'

}